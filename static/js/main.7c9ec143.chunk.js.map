{"version":3,"sources":["components/ScrollCalculator.js","App.js","reportWebVitals.js","index.js"],"names":["scrollList","Object","keys","scroll","map","name","stat","ScrollCalculator","useState","selectedScroll","setSelectedScroll","charGrowthRate","setCharGrowthRate","className","type","index","growthRate","onChange","scrollData","checked","target","state","newState","scrollName","colSpan","maxLength","value","statName","rate","test","result","Number","adjustCharacterGrowthRate","sumGrowthRate","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c9ec143.chunk.js","sourcesContent":["import { useState } from 'react'\nimport scroll from '../scroll.json'\n\nconst scrollList = Object.keys(scroll).map((name) => ({\n  name,\n  ...scroll[name],\n}))\n\nconst stat = ['HP', 'STR', 'MAG', 'SKL', 'SPD', 'LCK', 'DEF', 'CON', 'MOV']\n\nfunction ScrollCalculator() {\n  const [selectedScroll, setSelectedScroll] = useState({})\n  const [charGrowthRate, setCharGrowthRate] = useState({})\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-xl mb-4\">\n        Fire Emblem Thracia 776 Scroll Calculator\n      </h1>\n\n      <table>\n        <thead>\n          <tr>\n            <th className=\"p-4\">Scroll Name</th>\n            {stat.map((name) => (\n              <th key={name} className=\"p-4\">\n                {name}\n              </th>\n            ))}\n            <th className=\"p-4\">\n              <input type=\"checkbox\" />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {scrollList.map((scroll, index) => (\n            <tr\n              key={scroll.name}\n              className={`w-12 p-1${index % 2 !== 0 && ' bg-gray-50'}`}\n            >\n              <td className=\"p-4\">{scroll.name}</td>\n              {stat.map((name) => (\n                <td key={name} className=\"p-4 text-right\">\n                  {scroll.growthRate[name]}\n                </td>\n              ))}\n              <td className=\"p-4 text-center\">\n                <input\n                  type=\"checkbox\"\n                  onChange={handleOnSelectScroll(scroll)}\n                />\n              </td>\n            </tr>\n          ))}\n\n          <tr>\n            <td colSpan={11}>&nbsp;</td>\n          </tr>\n\n          <tr>\n            <td className=\"p-4\">Character Growth Rate</td>\n            {stat.map((name) => (\n              <td key={name} className=\"p-4\">\n                <input\n                  type=\"text\"\n                  className=\"w-16 border-2 border-gray-200 rounded-sm px-2 py-1 text-right\"\n                  maxLength=\"3\"\n                  value={charGrowthRate[name] ? charGrowthRate[name] : 0}\n                  onChange={handleOnInputCharacterGrowthRateChange(name)}\n                />\n              </td>\n            ))}\n            <td>&nbsp;</td>\n          </tr>\n          <tr>\n            <td className=\"p-4\">Total</td>\n            {stat.map((name) => (\n              <td key={name} className=\"p-4 text-right\">\n                {sumGrowthRate(name, charGrowthRate, selectedScroll)}\n              </td>\n            ))}\n            <td>&nbsp;</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n\n  function handleOnSelectScroll(scrollData) {\n    return ({ target: checked }) => {\n      setSelectedScroll((state) => {\n        if (checked && state[scrollData.name]) {\n          const newState = {}\n\n          for (const scrollName in state) {\n            if (scrollName !== scrollData.name) {\n              newState[scrollName] = state[scrollName]\n            }\n          }\n\n          return newState\n        } else if (checked) {\n          return {\n            ...state,\n            [scrollData.name]: scrollData,\n          }\n        }\n      })\n    }\n  }\n\n  function handleOnInputCharacterGrowthRateChange(statName) {\n    return ({ target: { value } }) => {\n      setCharGrowthRate((state) => ({\n        ...state,\n        [statName]: adjustCharacterGrowthRate(value),\n      }))\n    }\n  }\n}\n\nexport default ScrollCalculator\n\nfunction adjustCharacterGrowthRate(rate) {\n  if (!/\\d/.test(rate)) {\n    return 0\n  }\n\n  let result = Number(rate)\n\n  if (result > 100) {\n    result = 100\n  } else if (result < 0) {\n    result = 0\n  }\n\n  return result\n}\n\nfunction sumGrowthRate(statName, charGrowthRate, selectedScroll) {\n  const baseGrowthRate = charGrowthRate[statName]\n  let result = baseGrowthRate || 0\n\n  for (const scrollName in selectedScroll) {\n    const scrollData = selectedScroll[scrollName]\n\n    result += scrollData.growthRate[statName]\n      ? scrollData.growthRate[statName]\n      : 0\n  }\n\n  return result\n}\n","import ScrollCalculator from './components/ScrollCalculator'\n\nfunction App() {\n  return <ScrollCalculator />\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}